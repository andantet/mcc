plugins {
  id 'java-library'
  id 'idea'
  id 'eclipse'

  id 'fabric-loom' version '0.13-SNAPSHOT'
}

/* Setup */

def ENV = System.getenv()

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
tasks.withType(JavaCompile).configureEach { it.options.release = 17 }

String ver = "${project.version_id}+${project.major_version}-fabric"
version = ENV.GITHUB_ACTIONS ? "${ver}.build.${ENV.GITHUB_RUN_NUMBER}" : ver

archivesBaseName = project.mod_id
group = project.maven_group

/* Dependencies */

repositories {
  maven {
    name = 'Shedaniel'
    url  = 'https://maven.shedaniel.me/'
  }

  maven {
    name = 'Terraformers'
    url  = 'https://maven.terraformersmc.com/releases/'
  }
}

dependencies {
  minecraft "com.mojang:minecraft:${project.ver_minecraft}"
  mappings "net.fabricmc:yarn:${project.ver_minecraft}+build.${project.ver_yarn}:v2"
  modImplementation "net.fabricmc:fabric-loader:${project.ver_loader}"

  modImplementation "net.fabricmc.fabric-api:fabric-api:${project.ver_fabric}"
  include modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.ver_cloth_config}")
  modImplementation "com.terraformersmc:modmenu:${project.ver_mod_menu}"
}

/* Loom */

loom.runtimeOnlyLog4j = true

/* Resource Processing */

import groovy.json.*
processResources {
  // populate fabric.mod.json with defined version property
  inputs.property 'version', version
  filesMatching('fabric.mod.json') { expand 'version': version }

  doLast {
    // minify json files
    def start = System.currentTimeMillis()
    def minif = 0
    def bytes = 0
    fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
      File file = it
      minif++
      def oldLength = file.length()
      file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
      bytes += oldLength - file.length()
    }
    println("Minified $minif json files. Saved $bytes bytes. Took ${System.currentTimeMillis() - start} ms.")
  }
}

// add/remove files in jar
jar { from('README.md', 'LICENSE', 'LICENSE_ASSETS') exclude('.cache') }
